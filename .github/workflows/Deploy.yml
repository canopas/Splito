name: Deploy

on: push

jobs:
  deploy:
    runs-on: macos-13
    env:
      APP_STORE_APP_ID: ${{ secrets.APP_STORE_APP_ID }}
      APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
      APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
      DIST_CERTIFICATE: ${{ secrets.DIST_CERTIFICATE }}
      DIST_CERTIFICATE_PASSWORD: ${{ secrets.DIST_CERTIFICATE_PASSWORD }}
      DIST_PROFILE: ${{ secrets.DIST_PROFILE }}
      DIST_PROFILE_UUID: ${{ secrets.DIST_PROFILE_UUID }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Set Xcode Version
        run: |
          sudo xcode-select -switch /Applications/Xcode_15.2.app
          
      - name: Display Xcode Version
        run: /usr/bin/xcodebuild -version

      - name: Cache DerivedData
        uses: actions/cache@v2
        with:
          path: |
            DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.xcworkspace') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Cache CocoaPods
        uses: actions/cache@v2
        with:
          path: |
            Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods
        run: |
          if [ -f "Podfile.lock" ] && [ -f "${{ runner.workspace }}/Podfile.lock" ] && cmp -s Podfile.lock "${{ runner.workspace }}/Podfile.lock"; then
            echo "Podfile.lock unchanged. Skipping pod installs."
          else
            gem install cocoapods
            pod install --repo-update
          fi

      - name: Run SwiftLint
        run: |
          if git diff --name-only ${{ github.sha }} | grep -q '\.swift$'; then
            Pods/SwiftLint/swiftlint Splito
          else
            echo "No Swift files changed. Skipping SwiftLint."
          fi

      - name: Install Codemagic CLI tools
        run: pip install codemagic-cli-tools

      - name: Set up keychain
        run: keychain initialize

      - name: Set up Provisioning profiles
        run: |
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/${DIST_PROFILE_UUID}.mobileprovision)"
          echo ${DIST_PROFILE} | base64 --decode > "$PROFILE_PATH"

      - name: Set up signing certificate
        run: |
          echo $DIST_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $DIST_CERTIFICATE_PASSWORD

      - name: Set up code signing settings on the Xcode project
        run: xcode-project use-profiles

      - name: Get Build Version
        run: |
          file='Splito/VERSION'
          fileData=`cat $file`
          IFS='.'
          read -a versionValue <<< "$fileData"
          buildNumber=$(expr `expr ${versionValue[0]} \* 1000000` + `expr ${versionValue[1]} \* 10000` + ${{ github.run_number }})
          IFS=''
          buildName="${versionValue[0]}.${versionValue[1]}.${{ github.run_number }}"
          echo "Uploading build $buildName"

      - name: Build and Archive Project
        run: |
          ARCHIVE_PATH=$RUNNER_TEMP/Splito.xcarchive
          xcodebuild app_version_code=${buildNumber} app_version_name=${buildName} -workspace Splito.xcworkspace -scheme "Splito" -archivePath $ARCHIVE_PATH -destination generic/platform=iOS clean archive

      - name: Export Archive
        run: |
          EXPORT_PATH=$RUNNER_TEMP/Splito/build
          xcodebuild -exportArchive -archivePath $ARCHIVE_PATH -exportPath $EXPORT_PATH -exportOptionsPlist ExportOptions.plist | xcpretty --color

      - name: Store IPA
        run: |
          echo "Collecting artifacts.."
          cp -R "$ARCHIVE_PATH/dSYMs" .
          IPA="${EXPORT_PATH}Splito.ipa"
          echo $IPA

      - name: Deploy to App Store Connect
        env:
          ITC_USER_NAME: ${{ secrets.ITC_USER_NAME }}
          ITC_USER_PASSWORD: ${{ secrets.ITC_USER_PASSWORD }}
        run: |
          rm -rf $ARCHIVE_PATH
          rm -rf $EXPORT_PATH
          echo "Uploading app to iTC..."
          xcrun altool --upload-app -t ios -f $IPA -u $ITC_USER_NAME -p $ITC_USER_PASSWORD
